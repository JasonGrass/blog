(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{519:function(t,e,r){t.exports=r.p+"assets/img/599d0f25gy1flvt10tj60j216t0mzta6.a4803a79.jpg"},613:function(t,e,r){"use strict";r.r(e);var a=r(6),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("使用git的时候，犯错误了怎么办。以下是一些常规的回退措施。")]),t._v(" "),a("p",[t._v("本文内容稍显陈旧，可以参考这篇："),a("br"),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/jasongrass/p/10582449.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解Git - 一切皆commit - J.晒太阳的猫 - 博客园"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("首先，需要了解"),a("a",{attrs:{href:"http://jasongrass.gitee.io/2017-11-%E7%AC%94%E8%AE%B0-Git%E4%B8%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",target:"_blank",rel:"noopener noreferrer"}},[t._v("上一篇笔记"),a("OutboundLink")],1),t._v("里提到的一些基本概念。")]),t._v(" "),a("p",[t._v("先上图\n"),a("img",{attrs:{src:r(519),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),a("p",[t._v("推荐一篇博客："),a("a",{attrs:{href:"http://blog.csdn.net/hudashi/article/details/7664464",target:"_blank",rel:"noopener noreferrer"}},[t._v("git reset简介"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"git-reset-filename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-filename"}},[t._v("#")]),t._v(" git reset filename")]),t._v(" "),a("p",[t._v("撤销文件的暂存  "),a("code",[t._v("git reset filename")]),t._v("\n撤销暂存区所有的文件暂存  "),a("code",[t._v("git reset .")])]),t._v(" "),a("blockquote",[a("p",[t._v("下文中的 commitId 指任何可以指代一次提交的标识，如  id ; branch name ; tag name ; HEAD^ ;")])]),t._v(" "),a("h3",{attrs:{id:"git-reset-soft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-soft"}},[t._v("#")]),t._v(" git reset --soft")]),t._v(" "),a("p",[a("code",[t._v("git reset --soft commitId")]),a("br"),t._v("\n撤销到 commitId 标识的提交完成之后状态（commitId的那次提交不会被撤销）, 并将那次提交之后的修改，都放到暂存区。")]),t._v(" "),a("h3",{attrs:{id:"git-reset-mixed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-mixed"}},[t._v("#")]),t._v(" git reset --mixed")]),t._v(" "),a("p",[a("code",[t._v("git reset --mixed commitid")]),t._v("\n撤销到 commitId 标识的提交完成之后状态（commitId的那次提交不会被撤销）, 并将那次提交之后的修改，都放到编辑区，与现在编辑区中的内容合并(如果现在编辑区中有内容的话)。")]),t._v(" "),a("h3",{attrs:{id:"git-reset-hard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard"}},[t._v("#")]),t._v(" git reset --hard")]),t._v(" "),a("p",[a("code",[t._v("git reset --hard commitid")]),t._v("\n撤销到 commitId 标识的提交完成之后状态（commitId的那次提交不会被撤销）, 并将那次提交之后的修改，都丢弃。\n达到的效果就是，执行这条命令的分支，会指向commitId指向那次提交。")]),t._v(" "),a("p",[t._v("如在dev分支执行： "),a("code",[t._v("git reset --hard origin/dev")]),t._v(" ，达到的效果就是让dev分支与 origin/dev 分支(本地远程仓库中的dev分支)完全一致。")]),t._v(" "),a("h2",{attrs:{id:"git-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),a("p",[t._v("checkout 除了切换分支，还可以撤销文件的修改（对于那些没有使用add等命令加入到暂存区的修改）。"),a("br"),t._v(" "),a("code",[t._v("git checkout -- filename")]),t._v("  撤销指定文件的修改"),a("br"),t._v(" "),a("code",[t._v("git checkout -- .")]),t._v("  撤销全部文件的修改"),a("br"),t._v("\nPS: 可以使用通配符")]),t._v(" "),a("h2",{attrs:{id:"git-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),a("p",[t._v("如果某个提交已经Push到远程仓库，是不可以用reset的方法删除提交的，这时就要撤销提交。（如果是自己的远端分支，可以删除远端分支后重新push，但对于公共分支就不能这样了。）"),a("br"),t._v("\ngit revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留。\n"),a("code",[t._v("git revert commitId")]),t._v(" 是撤消该commit，作为一个新的commit。")]),t._v(" "),a("p",[a("code",[t._v("git revert dev")]),t._v(" ： 生成一个新提交，撤销dev分支的最后一次提交。")]),t._v(" "),a("h2",{attrs:{id:"git-commit-amend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-amend"}},[t._v("#")]),t._v(" git commit --amend")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://hubingforever.blog.163.com/blog/static/1710405792012314218512/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git commit"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v('如果我们提交过后发现有个文件改错了，或者只是想修改提交说明，这时可以对相应文件做出修改，将修改过的文件通过"git add"添加到暂存区，然后执行以下命令： '),a("code",[t._v("git commit --amend")]),a("br"),t._v("\n然后修改提交说明覆盖上次提交，但只能重写最后一次提交。")]),t._v(" "),a("h2",{attrs:{id:"staged-and-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#staged-and-stash"}},[t._v("#")]),t._v(" staged and stash")]),t._v(" "),a("p",[t._v("staged 和 stash 是两个不同的概念，尤其使用"),a("code",[t._v("暂存")]),t._v("这个词时。")]),t._v(" "),a("p",[t._v("staged 是 "),a("code",[t._v("modified")]),t._v(" "),a("code",[t._v("staged")]),t._v(" "),a("code",[t._v("commit")]),t._v(" 几种状态中的一个。"),a("br"),t._v("\nstash 是将没有提交的代码临时存储到一个堆栈，以便于切换分支或做其它操作。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("END")])])}),[],!1,null,null,null);e.default=s.exports}}]);