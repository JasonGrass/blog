(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{627:function(t,a,s){"use strict";s.r(a);var n=s(6),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("《改善 C# 程序的157个建议》读书笔记"),s("br"),t._v("\n第三部分：编码规范及习惯；"),s("br"),t._v("\n[命名规范] [代码整洁] [规范开发行为]")]),t._v(" "),s("p",[t._v("标 [+] 的为需要注意的，或可以关注的；"),s("br"),t._v("\n标 [-] 的为个人不赞同的；")]),t._v(" "),s("blockquote",[s("p",[t._v("[+] 指示的是其下方的建议项。")])]),t._v(" "),s("h1",{attrs:{id:"第三部分-编码规范及习惯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-编码规范及习惯"}},[t._v("#")]),t._v(" 第三部分 编码规范及习惯")]),t._v(" "),s("h2",{attrs:{id:"第10章-命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第10章-命名规范"}},[t._v("#")]),t._v(" 第10章 命名规范")]),t._v(" "),s("h5",{attrs:{id:"_1-命名空间与程序集-命名方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-命名空间与程序集-命名方式"}},[t._v("#")]),t._v(" 1. 命名空间与程序集 命名方式")]),t._v(" "),s("ul",[s("li",[t._v("公司组织名称")])]),t._v(" "),s("p",[s("code",[t._v("<Company>.<Component>")])]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n* 使用域名(Java世界中常见)\n"),s("p",[s("code",[t._v("Com.Microsoft.<Component>")])]),t._v(" "),s("p",[t._v("命名空间与程序集没有必然关系，"),s("br"),t._v("\n命名空间是逻辑分组；"),s("br"),t._v("\n程序集是物理分组；")]),t._v(" "),s("h5",{attrs:{id:"_2-对于编译成-dll-的程序集-建议命名空间与程序集名称一致。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-对于编译成-dll-的程序集-建议命名空间与程序集名称一致。"}},[t._v("#")]),t._v(" 2. 对于编译成 DLL 的程序集，建议命名空间与程序集名称一致。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 3. 命名空间使用复数\n另外，不要添加无意义前缀或后缀。  \n建议：System.Collections  \n不建议：System.Collection, System.AllCollections  \n"),s("h5",{attrs:{id:"_4-避免与-bcl-和-fcl-命名重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-避免与-bcl-和-fcl-命名重复"}},[t._v("#")]),t._v(" 4. 避免与 BCL 和 FCL 命名重复")]),t._v(" "),s("p",[t._v("BCL (Base Class Library)"),s("br"),t._v("\nFCL (Framework Class Library)")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 5. 类型命名：名词或名词词组  \n类型是现实中的实际对象，是名词。  \n"),s("p",[t._v("动词：对象的行为，而不是类型本身。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 6. 接口命名：形容词组\n接口：Can Do; 表示具备某种能力。\n"),s("h5",{attrs:{id:"_7-派生类使用基类名字做后缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-派生类使用基类名字做后缀"}},[t._v("#")]),t._v(" 7. 派生类使用基类名字做后缀")]),t._v(" "),s("p",[t._v("XxxException : Exception\nXxxAttribute : Attribute\nXxxEventArgs : EventArgs")]),t._v(" "),s("h5",{attrs:{id:"_8-泛型使用-t-做前缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-泛型使用-t-做前缀"}},[t._v("#")]),t._v(" 8. 泛型使用 T 做前缀")]),t._v(" "),s("h5",{attrs:{id:"_9-枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-枚举"}},[t._v("#")]),t._v(" 9. 枚举")]),t._v(" "),s("p",[t._v("枚举类型：复数"),s("br"),t._v("\n枚举元素：单数")]),t._v(" "),s("h5",{attrs:{id:"_10-公开元素-pascalcasing-命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-公开元素-pascalcasing-命名"}},[t._v("#")]),t._v(" 10. 公开元素：PascalCasing 命名")]),t._v(" "),s("h5",{attrs:{id:"_11-考虑用类名作为属性名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-考虑用类名作为属性名"}},[t._v("#")]),t._v(" 11. 考虑用类名作为属性名")]),t._v(" "),s("p",[t._v("public Company Company {get;set;}")]),t._v(" "),s("h5",{attrs:{id:"_12-私有或局部变量-camelcasing-命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-私有或局部变量-camelcasing-命名"}},[t._v("#")]),t._v(" 12. 私有或局部变量：camelCasing 命名")]),t._v(" "),s("h5",{attrs:{id:"_13-有条件地使用前缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-有条件地使用前缀"}},[t._v("#")]),t._v(" 13. 有条件地使用前缀")]),t._v(" "),s("p",[t._v("member : m_\nstatic : s_\n在变量较多时，可以谨慎考虑使用。"),s("br"),t._v("\n不过，变量较多时，考虑重构。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+++]")]),t._v("\n##### 14. 使用肯定性的短语命名布尔类型\n前缀：Is Can Has ...\n好：IsChecked\n坏：Checked\n"),s("h5",{attrs:{id:"_15-使用后缀表示已有类型的新版本。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-使用后缀表示已有类型的新版本。"}},[t._v("#")]),t._v(" 15. 使用后缀表示已有类型的新版本。")]),t._v(" "),s("p",[t._v("X509Certificate"),s("br"),t._v("\nX509Certificate2")]),t._v(" "),s("p",[t._v("不得不这样时，加后缀，而不是前缀，便于被发现。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 16. 委托与事件*类型*应添加上后缀\nXxxDelegate  \nXxxCallback  \nXxxEventHandler\n"),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 17. 委托和事件*变量*使用动词或形容词短语命名\nClick  \nSizeChanged  \n表示动作（委托）或事件的发生，状态的变化（事件）\n"),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 18. 事件处理器（事件的订阅函数）或委托处理器命名\n组合：\n事件变量所属对象_事件变量名\n委托变量所属对象On委托变量名\n"),s("p",[t._v("好：NameOnPropertyChanged\n坏：NameChanged （看起来像事件的变量名）")]),t._v(" "),s("h2",{attrs:{id:"第11章-代码整洁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第11章-代码整洁"}},[t._v("#")]),t._v(" 第11章 代码整洁")]),t._v(" "),s("h5",{attrs:{id:"_1-使用默认的访问修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用默认的访问修饰符"}},[t._v("#")]),t._v(" 1. 使用默认的访问修饰符")]),t._v(" "),s("p",[t._v("不是很赞同。\n原因：添加默认的修饰符，如 internal class，是在显式声明这个类不应该被变成 public 的，\n而不是忘记添加访问修饰符了。可以一定程度上防止他人随意修改访问权限。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+++]")]),t._v("\n##### 2. 不知道该不该用大括号，就用。\n增加代码可读性。\n"),s("p",[t._v("下面的例子中，Resharper 等工具会提示 "),s("code",[t._v("else")]),t._v(" 无需书写，以减少代码层级，但在这种情况下，\n建议可以加上 "),s("code",[t._v("else {}")]),t._v("，因为代码可读性明显提示。代码之间的关系和条理更清楚。")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Check")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"_3-总是使用有意义的命名。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-总是使用有意义的命名。"}},[t._v("#")]),t._v(" 3. 总是使用有意义的命名。")]),t._v(" "),s("p",[t._v("同时，避免一心二意，同一个变量，在一段代码中应只表示一个含义。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[++]")]),t._v("\n##### 4. 方法的抽象级别应在同一层级。\n"),s("p",[t._v("坏：")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RemoteInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个例子中，Init 方法先进行了部分初始化工作，然后调用 RemoteInit 完成另一部分初始化工作。")]),t._v(" "),s("p",[t._v("好：")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LocalInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RemoteInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("建议的做法是，将两部分初始化工作都抽象为相同层级的方法（LocalInit 和 RemoteInit），在 Init 中调用。\n层级更清晰。")]),t._v(" "),s("h5",{attrs:{id:"_5-单一职责-一个方法只做一件事。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-单一职责-一个方法只做一件事。"}},[t._v("#")]),t._v(" 5. （单一职责）一个方法只做一件事。")]),t._v(" "),s("p",[t._v("事情可大可小，但方法过长过负责时，就要考虑拆分。")]),t._v(" "),s("h5",{attrs:{id:"_6-单一职责-避免过长的方法和过长的类。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-单一职责-避免过长的方法和过长的类。"}},[t._v("#")]),t._v(" 6. （单一职责）避免过长的方法和过长的类。")]),t._v(" "),s("p",[t._v("过长的方法和过长的类是重构的首选目标。")]),t._v(" "),s("h5",{attrs:{id:"_7-高内聚-最小知识-只对外公布必要的操作。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-高内聚-最小知识-只对外公布必要的操作。"}},[t._v("#")]),t._v(" 7. （高内聚，最小知识）只对外公布必要的操作。")]),t._v(" "),s("h5",{attrs:{id:"_8-重构多个相关属性为一个类。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-重构多个相关属性为一个类。"}},[t._v("#")]),t._v(" 8. 重构多个相关属性为一个类。")]),t._v(" "),s("p",[t._v("e.g. 如一个 Person 类中，有地址，邮编，邮箱，电话，手机号等等属性，就应该考虑将其抽象为联系方式一个类。")]),t._v(" "),s("h5",{attrs:{id:"_9-不重复代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-不重复代码"}},[t._v("#")]),t._v(" 9. 不重复代码")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+]")]),t._v("\n##### 10. 使用表驱动法避免过长的 if 和 switch 分支。\n使用字典、数组、索引等代替 if 和 switch 。\n这个一种设计思路哦。\n"),s("h5",{attrs:{id:"_11-使用匿名方法-lambda-表达式代替方法。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-使用匿名方法-lambda-表达式代替方法。"}},[t._v("#")]),t._v(" 11. 使用匿名方法，Lambda 表达式代替方法。")]),t._v(" "),s("h5",{attrs:{id:"_12-使用事件访问器替换公开的事件成员变量。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-使用事件访问器替换公开的事件成员变量。"}},[t._v("#")]),t._v(" 12. 使用事件访问器替换公开的事件成员变量。")]),t._v(" "),s("p",[t._v("这个，C# 已经自动实现啦，无需考虑。")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[-]")]),t._v("\n##### 13. 最少，甚至是不要注释。\n这个，不赞同。\n写了注释不能成为代码本身糟糕的借口，但不代表不需要写注释，尤其是公开的方法，复杂的逻辑。 \n建议：保持代码本身的优雅，但不过分追求精简注释。\n"),s("h5",{attrs:{id:"_14-如抛出异常-则必须要注释。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-如抛出异常-则必须要注释。"}},[t._v("#")]),t._v(" 14. 如抛出异常，则必须要注释。")]),t._v(" "),s("p",[t._v("方法内部会抛出异常，在方法签名上方需要写注释。")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// <Summary>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 注释")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// </Summary>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/// <exception cref="System.IO.IOException">什么情况下会抛出该异常</exception>')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Xxx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XXX"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"第12章-规范开发行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第12章-规范开发行为"}},[t._v("#")]),t._v(" 第12章 规范开发行为")]),t._v(" "),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+++]")]),t._v('\n##### 1. 避免过度设计，在敏捷中重构\n瀑布式开发：分析->设计->实现->测试。（试用与类似于建筑这样的"不可重构"的行业）缺点：不能很好地应对变化。  \n敏捷开发：关键词——迭代。（Spring）  \n敏捷使用“用户故事（User Story）”来核定需求和工作量。一个迭代提供一个完成的用户故事的实现，交付给客户（真实客户，或者测试部门，运营等。）  \n'),s("br"),t._v(" "),s("span",{staticStyle:{color:"red"}},[t._v("[+++]")]),t._v("\n##### 2. 单元测试\n* TDD \n* 使用单元测试框架\n"),s("h5",{attrs:{id:"_3-利用特性为应用程序提供多个版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-利用特性为应用程序提供多个版本"}},[t._v("#")]),t._v(" 3. 利用特性为应用程序提供多个版本")]),t._v(" "),s("p",[t._v('e.g.  条件编译\n[Conditional("ONLINE")]\n[Conditional("OFFLINE")]')]),t._v(" "),s("h5",{attrs:{id:"_4-界面的自动化测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-界面的自动化测试"}},[t._v("#")]),t._v(" 4. 界面的自动化测试")]),t._v(" "),s("p",[t._v("工具：Code UI Automation")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("END")])])}),[],!1,null,null,null);a.default=r.exports}}]);